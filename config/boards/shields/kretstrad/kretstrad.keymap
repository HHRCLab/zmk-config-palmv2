/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/*
*#include <dt-bindings/zmk/ext_power.h>
*/

// LAYERS
#define DEFAULT 0
#define NUM     1
#define SYM     2

// MACROS
#define SUPER LC(LSHIFT)
#define SUPER2 LA(LC(LSHIFT))


/

 {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    td0: tap_dance_0 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_0";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&to 1>, <&tog 2>;
    };

    td1: tap_dance_1 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_1";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mt LCTRL TAB>, <&kp ESC>;
    };
  };

  combos {
    compatible = "zmk,combos";
    combo_cword {
      timeout-ms = <50>;
      key-positions = <16 19>;
      bindings = <&caps_word>;
    };

    combo_vimwq {
      timeout-ms = <50>;
      key-positions = <1 2>;
      bindings = <&vim_quit>;
    };
  };

  macros {
        vim_quit: vim_quit {
            label = "ZM_vim_quit";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp ESC &kp COLON &kp W &kp Q>;
        };
    };





  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <

&mt ESC Q       &kp W       &kp E       &kp R       &kp T     /**/  &kp Y       &kp U       &kp I       &kp O       &kp P          
&mt LSHIFT A    &kp S       &kp D       &kp F       &kp G     /**/  &kp H       &kp J       &kp K       &kp L       &mt LPAR RPAR           
&mt LCTRL Z     &kp X       &kp C       &kp V       &kp B     /**/  &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH       
                 &td0   /**/   &mo NUM  /**/   &kp SPACE     /**/  &mt LS(BSPC) BACKSPACE   /**/   &mt TAB ENTER  /**/   &to DEFAULT
      >;
    };

    num_layer {
      bindings = <

&kp ESC Q       &kp W       &kp E       &kp R       &kp T     /**/  &kp Y       &kp U       &kp I       &kp O       &kp P          
&mt LSHIFT A    &kp S       &kp D       &kp F       &kp G     /**/  &kp H       &kp J       &kp K       &kp L       &mt LPAR RPAR           
&mt LCTRL Z     &kp X       &kp C       &kp V       &kp B     /**/  &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH       
                 &td0   /**/   &mo NUM  /**/   &kp SPACE     /**/  &mt LS(BSPC) BACKSPACE   /**/   &mt TAB ENTER  /**/   &to DEFAULT
      >;
    };

    sym_layer {
      bindings = <

&kp ESC Q       &kp W       &kp E       &kp R       &kp T     /**/  &kp Y       &kp U       &kp I       &kp O       &kp P          
&mt LSHIFT A    &kp S       &kp D       &kp F       &kp G     /**/  &kp H       &kp J       &kp K       &kp L       &mt LPAR RPAR           
&mt LCTRL Z     &kp X       &kp C       &kp V       &kp B     /**/  &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH       
                 &td0   /**/   &mo NUM  /**/   &kp SPACE     /**/  &mt LS(BSPC) BACKSPACE   /**/   &mt TAB ENTER  /**/   &to DEFAULT
      >;
    };

  };
};