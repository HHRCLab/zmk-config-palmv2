/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <135>;
    quick-tap-ms = <135>;
};

/ { 

    combos {
        compatible = "zmk,combos";

        // Punctuation
        combo_equal {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <0>;
            bindings = <&kp EQUAL>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <1 12>;
            layers = <0>;
            bindings = <&kp PLUS>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <8 9>;
            layers = <0>;
            bindings = <&kp MINUS>;
        };

        combo_under_score {
            timeout-ms = <50>;
            key-positions = <8 17>;
            layers = <0>;
            bindings = <&kp UNDER>;
        };

        combo_left_bracket {
            timeout-ms = <50>;
            key-positions = <2 13>;
            layers = <0>;
            bindings = <&kp LBRC>;
        };

        combo_left_brace {
            timeout-ms = <50>;
            key-positions = <12 23>;
            layers = <0>;
            bindings = <&kp LBKT>;
        };

        combo_right_bracket {
            timeout-ms = <50>;
            key-positions = <7 16>;
            layers = <0>;
            bindings = <&kp RBRC>;
        };

        combo_right_brace {
            timeout-ms = <50>;
            key-positions = <17 26>;
            layers = <0>;
            bindings = <&kp RBKT>;
        };

        combo_tilde {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <0>;
            bindings = <&kp TILDE>;
        };

        combo_grave {
            timeout-ms = <50>;
            key-positions = <21 22>;
            layers = <0>;
            bindings = <&kp GRAVE>;
        };

        combo_back_slash {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <0>;
            bindings = <&kp BSLH>;
        };

        combo_pipe {
            timeout-ms = <50>;
            key-positions = <28 29>;
            layers = <0>;
            bindings = <&kp PIPE>;
        };

        combo_single_quote {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <0>;
            bindings = <&kp SQT>;
        };

        combo_double_quote {
            timeout-ms = <50>;
            key-positions = <18 19>;
            layers = <0>;
            bindings = <&kp DQT>;
        };


        // Control
        combo_enter {
            timeout-ms = <50>;
            key-positions = <17 18>;
            layers = <0 1>;
            bindings = <&kp ENTER>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_caps {
            timeout-ms = <50>;
            key-positions = <11 12>;
            layers = <0>;
            bindings = <&kp CAPS>;
        };

        combo_bspc {
            timeout-ms = <50>;
            key-positions = <17 18>;
            layers = <1>;
            bindings = <&kp BSPC>;
        };

        combo_esc_clear {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <1>;
            bindings = <&kp ESC>;
        };

        combo_clear {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <3>;
            bindings = <&kp KP_CLEAR>;
        };

    };

    behaviors {
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <175>;
            bindings = <&sl 1>, <&tog 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &mt LGUI Q  &kp W &kp E &kp R     &kp T            &kp Y          &kp U &kp I     &kp O   &mt LGUI P
                &mt LCTRL A &kp S &kp D &kp F     &kp G            &kp H          &kp J &kp K     &kp L   &mt LCTRL SEMI
                &mt LSFT Z  &kp X &kp C &kp V     &kp B            &kp N          &kp M &kp COMMA &kp DOT &mt LSFT FSLH
                                        &lt 2 TAB &mt LALT BSPC    &mt LALT SPACE &td1
                >;
        };

        /* // More traditional number symbol layer setting that has been successfully implemented on */
        /* // my Macabaca and Ferris/Sweep keyboards. */
        /* num_sym_layer { */
        /*     bindings = < */
        /*         &mt LGUI EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT    &kp CARET &kp AMPS &kp STAR &kp LPAR &mt LGUI RPAR */
        /*         &mt LCTRL N1  &kp N2 &kp N3   &kp N4   &kp N5       &kp N6    &kp N7   &kp N8   &kp N9   &mt LCTRL N0 */
        /*         &kp LSFT      &trans &trans   &trans   &trans       &trans    &trans   &trans   &trans   &trans */
        /*                                       &trans   &trans       &trans    &tog 1 */
        /*         >; */
        /* }; */

        // Numpad style numer and symbol layer layout.
        num_sym_layer {
            bindings = <
                &kp LGUI  &kp EXCL &kp AT    &kp HASH  &none       &kp FSLH       &kp N7 &kp N8 &kp N9 &mt LGUI MINUS
                &kp LCTRL &kp DLLR &kp PRCNT &kp CARET &none       &kp STAR       &kp N4 &kp N5 &kp N6 &mt LCTRL PLUS
                &kp LSFT  &kp AMPS &kp STAR  &kp LPAR  &kp RPAR    &kp N0         &kp N1 &kp N2 &kp N3 &mt LSFT DOT
                                             &to 2     &trans      &mt LALT BSPC  &tog 1
                >;
        };

        nav_layer {
            bindings = <
                &mt LGUI F9  &kp F10 &kp F11 &kp F12 &none     &kp HOME   &kp PG_DN    &kp PG_UP    &kp END   &kp LGUI
                &mt LCTRL F5 &kp F6  &kp F7  &kp F8  &none     &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT &kp LCTRL
                &mt LSFT F1  &kp F2  &kp F3  &kp F4  &to 3     &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &none     &kp LSFT
                                             &tog 2  &trans    &trans     &trans
                >;
        };

        bt_num_layer {
            bindings = <
                &none        &none        &none        &none        &none         &kp KP_SLASH    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS
                &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR    &kp KP_ASTERISK &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS
                &to 4        &none        &none        &none        &tog 3        &kp KP_N0       &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_DOT
                                                       &none        &none         &kp KP_ENTER    &kp BSPC
                >;
        };

        adj_layer {
            bindings = <
                &none &none &none &none       &none    &none  &none  &none &none &none
                &none &none &none &none       &none    &none  &none  &none &none &none
                &none &none &none &none       &none    &none  &none  &none &none &none
                                  &bootloader &reset   &reset &bootloader
                >;
        };

    };
};
