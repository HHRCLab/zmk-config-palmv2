/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <165>;
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&lt {
    quick-tap-ms = <150>;
    flavor = "hold-preferred";
};

/ { 

    behaviors {
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            /* tapping-term-ms = <165>; */
            bindings = <&sl 1>, <&tog 1>;
        };

        mts: hold_tap_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_SHORT";
            #binding-cells = <2>;
            /* tapping-term-ms = <135>; */
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };

        mth: hold_tap_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LONG";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        
        /* bsdl: backspace_del { */
        /*     compatible = "zmk,behavior-mod-morph"; */
        /*     label = "BSPC_DEL"; */
        /*     #binding-cells = <0>; */
        /*     bindings = <&thm LALT BSPC>, <&kp DEL>; */
        /*     mods = <(MOD_LSFT|MOD_RSFT)>; */
        /*     masked_mods = <(MOD_LSFT|MOD_RSFT)>; */
        /* }; */

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &mt LGUI Q    &kp W  &kp E  &kp R      &kp T                 &kp Y            &kp U  &kp I      &kp O    &mt LGUI P
                &mth LCTRL A  &kp S  &kp D  &kp F      &kp G                 &kp H            &kp J  &kp K      &kp L    &mt LCTRL SEMI
                &mt LSFT Z    &kp X  &kp C  &kp V      &kp B                 &kp N            &kp M  &kp COMMA  &kp DOT  &mt LSFT FSLH
                                            &lt 2 TAB  &mts LALT BSPC        &mts LALT SPACE  &td1
                >;
        };

        // Numbers and punctuations each on separate row
        num_punc_layer {
            bindings = <
                &kp EXCL      &kp AT  &kp HASH  &kp DLLR     &kp PRCNT        &kp CARET        &kp AMPS     &kp STAR  &kp LPAR  &kp RPAR
                &mt LCTRL N1  &kp N2  &kp N3    &mt LGUI N4  &kp N5           &kp N6           &mt LGUI N7  &kp N8    &kp N9    &mt LCTRL N0
                &kp LSFT      &none   &none     &kp LBKT     &kp LBRC         &kp RBRC         &kp RBKT     &trans    &trans    &trans
                                                &mo 4        &trans           &mts LALT SPACE  &trans
                >;
        };

        /* // Numpad style numer and symbol layer layout. */
        /* num_punc_layer { */
        /*     bindings = < */
        /*         &kp LGUI   &kp EXCL  &kp AT     &kp HASH   &none                 &kp FSLH        &kp N7  &kp N8  &kp N9  &mt LGUI MINUS */
        /*         &kp LCTRL  &kp DLLR  &kp PRCNT  &kp CARET  &none                 &kp STAR        &kp N4  &kp N5  &kp N6  &mt LCTRL PLUS */
        /*         &kp LSFT   &kp AMPS  &kp STAR   &kp LPAR   &lt 3 RPAR            &kp N0          &kp N1  &kp N2  &kp N3  &mt LSFT DOT */
        /*                                         &trans     &mts LALT DEL         &mts LALT BSPC  &trans  */
        /*         >; */
        /* }; */

        nav_sys_layer {
            bindings = <
                &mt LGUI F9   &kp F10  &kp F11  &kp F12  &kp PSCRN        &kp HOME    &kp PG_DN     &kp PG_UP     &kp END       &kp LGUI
                &mt LCTRL F5  &kp F6   &kp F7   &kp F8   &none            &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT     &kp LCTRL
                &mt LSFT F1   &kp F2   &kp F3   &kp F4   &tog 3           &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_DN  &mt LSFT C_BRI_UP
                                                &tog 2   &trans           &trans      &trans
                >;
        };

        nav_numpad_layer {
            bindings = <
                &none    &kp HOME  &kp UP    &kp PG_UP  &none            &kp FSLH  &kp N7  &kp N8  &kp N9  &kp MINUS
                &kp END  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN        &kp STAR  &kp N4  &kp N5  &kp N6  &kp PLUS
                &none    &none     &none     &none      &tog 3           &kp N0    &kp N1  &kp N2  &kp N3  &kp DOT
                                             &mo 4      &trans           &kp BSPC  &none
                >;
        };

        adj_layer {
            bindings = <
                &none         &none         &none         &none         &none               &none        &none  &none  &none  &none
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4        &bt BT_CLR   &none  &none  &none  &none
                &none         &none         &none         &none         &none               &none        &none  &none  &none  &none
                                                          &trans        &bootloader         &bootloader  &none
                >;
        };

    };

    combos {
        compatible = "zmk,combos";

        // Punctuation
        combo_equal {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <0 1>;
            bindings = <&kp EQUAL>;
        };

        combo_plus {
            timeout-ms = <50>;
            key-positions = <1 12>;
            layers = <0 1>;
            bindings = <&kp PLUS>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <8 9>;
            layers = <0 1>;
            bindings = <&kp MINUS>;
        };

        combo_under_score {
            timeout-ms = <50>;
            key-positions = <8 17>;
            layers = <0 1>;
            bindings = <&kp UNDER>;
        };

        combo_left_bracket {
            timeout-ms = <50>;
            key-positions = <2 13>;
            layers = <0>;
            bindings = <&kp LBKT>;
        };

        combo_left_brace {
            timeout-ms = <50>;
            key-positions = <3 14>;
            layers = <0>;
            bindings = <&kp LBRC>;
        };

        combo_right_brace {
            timeout-ms = <50>;
            key-positions = <6 15>;
            layers = <0>;
            bindings = <&kp RBRC>;
        };

        combo_right_bracket {
            timeout-ms = <50>;
            key-positions = <7 16>;
            layers = <0>;
            bindings = <&kp RBKT>;
        };

        combo_tilde {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <0>;
            bindings = <&kp TILDE>;
        };

        combo_tilde_alt {
            timeout-ms = <50>;
            key-positions = <21 23>;
            layers = <0>;
            bindings = <&kp TILDE>;
        };

        combo_grave {
            timeout-ms = <50>;
            key-positions = <21 22>;
            layers = <0>;
            bindings = <&kp GRAVE>;
        };

        combo_back_slash {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <0>;
            bindings = <&kp BSLH>;
        };

        combo_pipe {
            timeout-ms = <50>;
            key-positions = <28 29>;
            layers = <0>;
            bindings = <&kp PIPE>;
        };

        combo_pipe {
            timeout-ms = <50>;
            key-positions = <26 28>;
            layers = <0>;
            bindings = <&kp PIPE>;
        };

        combo_single_quote {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <0>;
            bindings = <&kp SQT>;
        };

        combo_double_quote {
            timeout-ms = <50>;
            key-positions = <18 19>;
            layers = <0>;
            bindings = <&kp DQT>;
        };


        // Control
        combo_enter {
            timeout-ms = <35>;
            key-positions = <17 18>;
            layers = <0 1 3>;
            bindings = <&kp ENTER>;
        };

        combo_caps {
            timeout-ms = <50>;
            key-positions = <11 12>;
            layers = <0>;
            bindings = <&kp CAPS>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            layers = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_esc_clear {
            timeout-ms = <50>;
            key-positions = <32 33>;
            layers = <3>;
            bindings = <&kp ESC>;
        };


        combo_del {
            timeout-ms = <50>;
            key-positions = <30 31>;
            layers = <0 1>;
            bindings = <&kp DEL>;
        };

        combo_L2 {
            timeout-ms = <50>;
            key-positions = <16 30>;
            layers = <0>;
            bindings = <&tog 2>;
        };

    };

};
